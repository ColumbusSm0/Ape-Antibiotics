//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Inputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""NormalGameplay"",
            ""id"": ""56dd47d6-0c3d-445b-b83c-43f80aa5cb26"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9db51086-8a7e-4d6d-85de-3053776d0198"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b8ad06a9-5f1c-4184-8540-4082236de303"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""51985849-c428-4099-b255-3c03f114b14d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""252a07d2-b05b-42da-8bf2-7198ad367934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch/Slide"",
                    ""type"": ""Button"",
                    ""id"": ""73b734e2-2675-41b6-b0d7-e1bd96b1fcb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatAbility1"",
                    ""type"": ""Button"",
                    ""id"": ""4ca3d354-57bd-497b-91d3-124474fa9b7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""be0b28f5-e1df-483e-ac39-6ba00710fb69"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""029bc513-7d8a-4279-bad8-e43287fcbdf6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8e53c08a-3201-48d3-a652-8555b6da93c6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e2bbba6a-6475-4aa6-acab-b5fecf02956f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""138b2bab-9927-4200-922a-191f6d729c19"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43d711b6-fc74-4c18-95a9-6d88a65c4613"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98f3fea6-23e4-4475-a970-7a3c17cd5fbb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c03cfc5e-2645-478f-832c-f5cc32b792dd"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch/Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab100bf2-317e-4070-bc3e-cfba558ae193"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatAbility1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""582582ef-6bb2-441b-99ac-98936c6b02da"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NormalGameplay
        m_NormalGameplay = asset.FindActionMap("NormalGameplay", throwIfNotFound: true);
        m_NormalGameplay_Movement = m_NormalGameplay.FindAction("Movement", throwIfNotFound: true);
        m_NormalGameplay_Aim = m_NormalGameplay.FindAction("Aim", throwIfNotFound: true);
        m_NormalGameplay_Jump = m_NormalGameplay.FindAction("Jump", throwIfNotFound: true);
        m_NormalGameplay_Sprint = m_NormalGameplay.FindAction("Sprint", throwIfNotFound: true);
        m_NormalGameplay_CrouchSlide = m_NormalGameplay.FindAction("Crouch/Slide", throwIfNotFound: true);
        m_NormalGameplay_CombatAbility1 = m_NormalGameplay.FindAction("CombatAbility1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NormalGameplay
    private readonly InputActionMap m_NormalGameplay;
    private INormalGameplayActions m_NormalGameplayActionsCallbackInterface;
    private readonly InputAction m_NormalGameplay_Movement;
    private readonly InputAction m_NormalGameplay_Aim;
    private readonly InputAction m_NormalGameplay_Jump;
    private readonly InputAction m_NormalGameplay_Sprint;
    private readonly InputAction m_NormalGameplay_CrouchSlide;
    private readonly InputAction m_NormalGameplay_CombatAbility1;
    public struct NormalGameplayActions
    {
        private @PlayerInputs m_Wrapper;
        public NormalGameplayActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_NormalGameplay_Movement;
        public InputAction @Aim => m_Wrapper.m_NormalGameplay_Aim;
        public InputAction @Jump => m_Wrapper.m_NormalGameplay_Jump;
        public InputAction @Sprint => m_Wrapper.m_NormalGameplay_Sprint;
        public InputAction @CrouchSlide => m_Wrapper.m_NormalGameplay_CrouchSlide;
        public InputAction @CombatAbility1 => m_Wrapper.m_NormalGameplay_CombatAbility1;
        public InputActionMap Get() { return m_Wrapper.m_NormalGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalGameplayActions set) { return set.Get(); }
        public void SetCallbacks(INormalGameplayActions instance)
        {
            if (m_Wrapper.m_NormalGameplayActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnMovement;
                @Aim.started -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnAim;
                @Jump.started -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnJump;
                @Sprint.started -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnSprint;
                @CrouchSlide.started -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnCrouchSlide;
                @CrouchSlide.performed -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnCrouchSlide;
                @CrouchSlide.canceled -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnCrouchSlide;
                @CombatAbility1.started -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnCombatAbility1;
                @CombatAbility1.performed -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnCombatAbility1;
                @CombatAbility1.canceled -= m_Wrapper.m_NormalGameplayActionsCallbackInterface.OnCombatAbility1;
            }
            m_Wrapper.m_NormalGameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @CrouchSlide.started += instance.OnCrouchSlide;
                @CrouchSlide.performed += instance.OnCrouchSlide;
                @CrouchSlide.canceled += instance.OnCrouchSlide;
                @CombatAbility1.started += instance.OnCombatAbility1;
                @CombatAbility1.performed += instance.OnCombatAbility1;
                @CombatAbility1.canceled += instance.OnCombatAbility1;
            }
        }
    }
    public NormalGameplayActions @NormalGameplay => new NormalGameplayActions(this);
    public interface INormalGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouchSlide(InputAction.CallbackContext context);
        void OnCombatAbility1(InputAction.CallbackContext context);
    }
}
